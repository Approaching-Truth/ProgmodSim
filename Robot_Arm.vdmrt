class Robot_Arm

instance variables
    public time_step : real; 
    public env_joint_angle : real; -- radians, current angle of arm
    public env_angular_velocity : real;
    public state_history : seq of (real * real * real);
    
values
    target_lb : real = 3.14/2 - 0.1; -- N1
    target_ub : real = 3.14/2; -- N2
    safe_lb : real = 0; -- 0pi = 0deg
    safe_ub : real = 3.14/2; --1/2 pi = 90deg
    
operations
    public Robot_Arm: () ==> Robot_Arm
    Robot_Arm () == (
        time_step := 0;
        env_joint_angle := 0;
        env_angular_velocity := 0;
        state_history := [];
        
        -- Record state
        record_state();
    );

    public record_state: () ==> ()
    record_state () == (
        state_history := state_history ^ [mk_(time_step, env_joint_angle, env_angular_velocity)];
    );


    public step: (real) ==> ()
    step(delta) == duration(0) (
        -- Declare variables
        -- Fetch values 
        dcl current_joint_angle : real;
        dcl current_angular_velocity : real;

        -- Compute New Values 
        dcl delta_joint_angle : real;
        dcl next_joint_angle : real;

        -- UPDATE environment angular velocity
        env_angular_velocity := MySystem`controller.ctl_angular_velocity;

         -- Fetch Values
        current_joint_angle := env_joint_angle;
        current_angular_velocity := env_angular_velocity;
        

        -- COMPUTE NEW VALUES
        delta_joint_angle := current_angular_velocity * delta;
        next_joint_angle := current_joint_angle + delta_joint_angle;

        
        -- boundary --
        -- We assume that the arm will simply stop when it reaches the boundaries
        if(next_joint_angle >= safe_ub) then (next_joint_angle := safe_ub; current_angular_velocity := 0);
        if(next_joint_angle <= safe_lb) then (next_joint_angle := safe_lb; current_angular_velocity := 0);

        -- SET NEW VALUES --
        env_joint_angle := next_joint_angle;
        env_angular_velocity := current_angular_velocity;

        time_step := time_step + delta;

        -- Record state
        record_state();
    ) 
    post env_joint_angle >= safe_lb and env_joint_angle <= safe_ub;

    -- Getter method, returns env_joint_angle
    public get_env_joint_angle: () ==> (real)
    get_env_joint_angle() == duration(0) (
        return env_joint_angle;
    )
    

end Robot_Arm