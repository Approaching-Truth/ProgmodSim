class Robot_Arm_Controller
    instance variables
        math : MATH := new MATH ();

        -- Used to inform the loop function that it can enter normal mode
        initialization_complete: bool;

        public ctl_joint_angle: real;
        public ctl_target_joint_angle: real;
        public previous_angle_error: real;
        public ctl_angular_velocity: real;
        public ctl_angular_acceleration: real;
        public acceptance_range: real;
        public state_history: seq of (real * real * real);
        private last_time: real;
        private K_p : real;
        private K_d : real;
        public ctl_mode : <Initialisation> | <Normal> | <Emergency>;
        -- Cosimulation
        public controllerActive : BoolPort := new BoolPort(true);
        
    
    values
        update_rate : real = 5E8;

        -- NOTE: The constants could be retrieved at start up, but this would require another "sensor" of some kind.
        --       For the moment, we assume that the controller is hard-coded for these specific values.
        arm_cylinder_radius : real = 0.8; -- meter
        arm_load_mass : real = 1.2; -- kg
        gravitational_acceleration : real = 9.8159; -- m/s^2

    operations
        -- Constructor
        public Robot_Arm_Controller: () ==> Robot_Arm_Controller
        Robot_Arm_Controller() == (

            ctl_target_joint_angle := -1; -- Will be overwritten
            ctl_joint_angle := 0;
            previous_angle_error := 0;
            ctl_angular_velocity := 0;
            ctl_angular_acceleration := 0;
            acceptance_range := 0.01;
            state_history := [];
            last_time := time/1E9;
            K_p := 0.1;
            K_d := 0.1;
            ctl_mode := <Initialisation>;
        );

        public set_controller_params: real * real ==> ()
        set_controller_params (K_p_in, K_d_in) == (
            K_p := K_p_in;
            K_d := K_d_in;
        );


        public record_state: () ==> ()
        record_state() == duration(0)(
            state_history := state_history ^ [mk_(time, ctl_joint_angle, ctl_angular_velocity)]
        );
        
        public find_target: () ==> ()
        find_target() == duration (0E7) (
            dcl target : real;
            dcl angle_error : real;
            dcl delta_angle_error : real;
            dcl new_torque : real;
            dcl delta_t : real;
            dcl t : real;
            dcl gravity_torque : real;
            
            -- Set timing local variabels
            t := time/1E9;
            delta_t := t - last_time;
            last_time := t;

            -- Get target from UI
            target := ctl_target_joint_angle;

            -- Calculate errror
            angle_error := target - ctl_joint_angle;
            delta_angle_error := (angle_error - previous_angle_error) / delta_t;
            
            /*
             -- In accepted range
            if ((angle_error < acceptance_range/2) and (angle_error > -acceptance_range/2)) then (
                -- set stop mode
                skip;
            )
            -- Not in accepted range
            else (
            );
            */

            -- We need to calculate the gravity torque to compensate for it
            gravity_torque := arm_load_mass * gravitational_acceleration * arm_cylinder_radius * math.cos(ctl_joint_angle);
           
            new_torque := K_p * angle_error + K_d * delta_angle_error + gravity_torque;
            
            MySystem`motorTorqueSensor.setMotorTorque(new_torque);
            
          
            previous_angle_error := angle_error;
            record_state();
        );
        
        -- Sense joint angle
        public monitor_joint_angle: () ==> ()
        monitor_joint_angle() == duration(0E7) (
            dcl env_angle: real := MySystem`jointAngleSensor.getAngle();
            dcl env_angular_velocity: real := MySystem`angularVelocitySensor.getAngularVelocity();
            ctl_joint_angle := env_angle;
            ctl_angular_velocity := env_angular_velocity;
            record_state();
        );

        -- Update target
        public update_target: () ==> ()
        update_target () == duration(0)(
            if not (MySystem`targetAngleSensor.getAngle() = ctl_target_joint_angle) then (
                ctl_target_joint_angle := MySystem`targetAngleSensor.getAngle()
            );
        );

        -- Applies emergency break which stops all motion!
        -- NOTE: This is a quick fix, and will be changed to later iterations!
        public emergency_break: () ==> ()
        emergency_break() == duration(0)(
            -- Set env var to 0
            

            -- Set ctl var to 0
            ctl_angular_acceleration := 0;
            ctl_angular_velocity := 0;

            -- Set torque to 0
            --  Changed to a toggle for now since gravity torque would need to be included otherwise
        ); 

        private loop: () ==> ()
        
        loop() == duration(0) (
            -- Get current joint angle
            monitor_joint_angle();

            -- Check if target has changed
            update_target();

            -- Calculate new torque
            find_target();

            -- Check and switch mode
            if (    ctl_joint_angle >= MySystem`hwi.safe_lb
                and ctl_joint_angle <= MySystem`environment.safe_ub 
                and MySystem`motor.get_operation_status() = <Working>
                and MySystem`motion_sensor.get_motion_sensor_status() = <Clear>
                ) 
            then (
                ctl_mode := <Normal>
            ) else (
                ctl_mode := <Emergency>;
            );

            -- Peform action based on mode 

            -- Initialisation
            -- If in Initialisation, do nothing
            if (ctl_mode = <Initialisation>) then (
                skip;
            )
            
            -- Normal
            -- Find target 
            else if (ctl_mode = <Normal>) then (
                find_target();
            )
            
            -- Emergency
            -- Stop movement
            else if (ctl_mode = <Emergency>) then (
                emergency_break();
            );
        )

        thread
            periodic(1E8, 0, 0, 0)(loop);


end Robot_Arm_Controller