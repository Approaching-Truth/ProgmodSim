class World
    instance variables
        io : IO := new IO ();
        csv : CSV := new CSV ();

    operations

        -- Format data history
        -- State histories are seperated by |
        -- Variables partionens by /
        -- Individual variabels by &
        public format_data_out: seq of (real * real * real) * seq of (real * real * real) ==> seq of char
        format_data_out(sh1, sh2) == (
            -- String to be manipulated
            dcl out_string : seq of char := "";
            
            -- STATE HISTORY 1
            -- First att
            for tup in sh1 do (
                dcl val: real := tup.#1;
                out_string := out_string ^ VDMUtil`val2seq_of_char[real](val) ^ "&";
            );

            out_string := out_string ^ "/";

            -- Second att
            for tup in sh1 do (
                dcl val : real := tup.#2;
                out_string := out_string ^ VDMUtil`val2seq_of_char[real](val) ^ "&";
            );

            out_string := out_string ^ "/";

            -- Third att
            for tup in sh1 do (
                dcl val : real := tup.#3;
                out_string := out_string ^ VDMUtil`val2seq_of_char[real](val) ^ "&";
            );

            out_string := out_string ^ "|";

            -- STATE HISTORY 2
            -- First att
            for tup in sh2 do (
                dcl val: real := tup.#1;
                out_string := out_string ^ VDMUtil`val2seq_of_char[real](val) ^ "&";
            );
            out_string := out_string ^ "/";

            -- Second att
            for tup in sh2 do (
                dcl val : real := tup.#2;
                out_string := out_string ^ VDMUtil`val2seq_of_char[real](val) ^ "&";
            );
            out_string := out_string ^ "/";

            -- Third att
            for tup in sh2 do (
                dcl val : real := tup.#3;
                out_string := out_string ^ VDMUtil`val2seq_of_char[real](val) ^ "&";
            );
            out_string := out_string ^ "/";

            return out_string;
        );

        public scenario: () ==> bool
        scenario() == (
            dcl succ : bool;
            dcl str : seq of char;

            -- Log results
            str := format_data_out(MySystem`arm.state_history, MySystem`arm.state_history);
            succ := io.fecho("log_files_and_visual\\log_files\\sce_log", str, <start>);
            
            return true;
        );

        public Scenario1 : () ==> bool
        Scenario1() == (
            dcl str : seq of char;
            dcl succ : bool;

            
            MySystem`controller.set_target(3.1415/8);

            for i = 1 to 20 do (
                duration(3E9)skip; -- 6 s
                MySystem`controller.monitor_joint_angle(); -- 0.1 s
                MySystem`controller.update_velocity(0.5); -- 0.5 s
                MySystem`arm.step(); -- 0 s
            ); 
            
            -- 6,6 per cycle

            -- Log results
            str := format_data_out(MySystem`arm.state_history, MySystem`arm.state_history);
            succ := io.fecho("log_files_and_visual\\log_files\\sce1_log", str, <start>);
            
            return true;
        );

        public Scenario2 : () ==> bool
        Scenario2() == (
            dcl str : seq of char;
            dcl succ : bool;

            
            MySystem`controller.set_target(3.1415/8);

            for i = 1 to 5 do (
                duration(2E9)skip; -- 6 s
                MySystem`controller.monitor_joint_angle(); -- 0.1 s
                MySystem`controller.update_velocity(0.2); -- 0.5 s
                MySystem`arm.step(); -- 0 s
            ); 
            
            -- 6,6 per cycle

            -- Log results
            str := format_data_out(MySystem`arm.state_history, MySystem`arm.state_history);
            succ := io.fecho("log_files_and_visual\\log_files\\sce2_log", str, <start>);
            
            return true;
        );

        public Scenario3 : () ==> bool
        Scenario3() == (
            dcl str : seq of char;
            dcl succ : bool;

            
            MySystem`controller.set_target(3.1415/8);

            for i = 1 to 10 do (
                duration(6E9)skip; -- 6 s
                MySystem`controller.monitor_joint_angle(); -- 0.1 s
                MySystem`controller.update_velocity(0.25); -- 0.5 s
                MySystem`arm.step(); -- 0 s
            ); 
            
            -- 6,6 per cycle

            -- Log results
            str := format_data_out(MySystem`arm.state_history, MySystem`arm.state_history);
            succ := io.fecho("log_files_and_visual\\log_files\\sce3_log", str, <start>);
            
            return true;
        );

        public Scenario4 : () ==> bool
        Scenario4() == (
            dcl str : seq of char;
            dcl succ : bool;

            
            MySystem`controller.set_target(3.1415/8);

            for i = 1 to 5 do (
                duration(3E9)skip; -- 6 s
                MySystem`controller.monitor_joint_angle(); -- 0.1 s
                MySystem`controller.update_velocity(0.25); -- 0.5 s
                MySystem`arm.step(); -- 0 s
            ); 
            
            -- 6,6 per cycle

            -- Log results
            str := format_data_out(MySystem`arm.state_history, MySystem`arm.state_history);
            succ := io.fecho("log_files_and_visual\\log_files\\sce4_log", str, <start>);
            
            return true;
        )


        
    
        
end World